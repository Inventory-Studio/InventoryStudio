@using Newtonsoft.Json
@model ItemViewModel
@{
    var itemBarcodes = JsonConvert.SerializeObject(Model.Item.ItemBarcodes);
}

<div class="tab-pane border-0 bg-border-none p-0 m-0 fade" id="barcode-content" role="tabpanel" aria-labelledby="barcode-tab">
    <div class="bg-gray-200 py-2 px-3 rounded mb-4">
        <h6 class="mb-0">Item Barcodes</h6>
    </div>
    <ejs-grid id="GridBarcodes" class="h-100" dataSource="@Model.Item.ItemBarcodes" toolbarClick="barcodesToolbarClick" allowPaging="true" allowReordering="true" allowSorting="true" allowSelection="true" allowFiltering="true" enableStickyHeader="true" width="100%" height="100%"
              allowExcelExport="true" allowPdfExport="true" toolbar="@(new List<string>() { "Add", "Edit", "Update", "Delete", "PdfExport", "ExcelExport" })">

        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Normal"></e-grid-editSettings>
        <e-grid-filterSettings type="Excel" mode="OnEnter"></e-grid-filterSettings>
        @* <e-grid-pagesettings pageCount="5"></e-grid-pagesettings> *@
        <e-grid-columns>
            <e-grid-column visible="false" field="ItemBarcodeID" headerText="ID" type="int" isPrimaryKey="true"
                           validationRules="@(new { number = true })" width="80">
            </e-grid-column>
            <e-grid-column field="Barcode" headerText="Barcode" width="120"></e-grid-column>
            <e-grid-column field="Type" headerText="Type" width="120"></e-grid-column>
            @if (Model.IsDetails)
            {
                <e-grid-column field="UpdatedOn" headerText="Updated On" type="datetime" format="M/d/yyyy h:mm a" width="120"></e-grid-column>
                <e-grid-column field="CreatedOn" headerText="Created On" type="datetime" format="M/d/yyyy h:mm a" width="120"></e-grid-column>
                <e-grid-column headerText="Actions" template="#actions" width="100" maxWidth="100"></e-grid-column>
            }
        </e-grid-columns>
    </ejs-grid>
</div>


<!-- Actions template -->
<script id="actions" type="text/x-template">
    <div class="hstack gap-2">
        <a href="#" class="btn btn-icon btn-warning-light" data-bs-toggle="tooltip" title="Print barcode" aria-label="Print barcode button">
            <i class="bi-printer-fill"></i>
        </a>
    </div>
</script>


<script src="@Url.Content("~/js/utils/utils.js")"></script>
<!-- Javascript logic for datagrid -->
<script lang="js">
const barcodesToolbarClick = customBarcodeExportToolbarClick("GridBarcodes", "IS_Barcodes");
</script>

<script>
    $(document).ready(function () {
        $('#addBarCodes').click(function () {
            var $tableBody = $('#barcodeTable').find('tbody');
            var $newRow = $('<tr/>');
            $newRow.append($('<td/>').html('<input type="text" class="form-control" placeholder="Barcode">'));
            $newRow.append($('<td/>').html('<input type="text" class="form-control" placeholder="Type">'));

            var $actionsCell = $('<td/>');
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-success btn-sm saveItemBarCodeBtn').text('√'));
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm deleteBtn').text('x'));
            $newRow.append($actionsCell);
            $tableBody.append($newRow);
        });

        $(document).on('click', '.saveItemBarCodeBtn', function () {
            var $tableBody = $('#barcodeTable').find('tbody');
            var index = $tableBody.find('tr').length - 1;
            var $row = $(this).closest('tr');
            var barcodeVal = $row.find('input').eq(0).val();
            var typeVal = $row.find('input').eq(1).val();
            $row.find('td').eq(0).text(barcodeVal);
            $row.find('td').eq(1).text(typeVal);

            var $hiddenBarcodeInput = $('<input/>', {
                type: 'hidden',
                name: 'Item.ItemBarcodes[' + index + '].Barcode',
                value: barcodeVal
            }).appendTo($row.find('td').eq(0));

            var $hiddenTypeInput = $('<input/>', {
                type: 'hidden',
                name: 'Item.ItemBarcodes[' + index + '].Type',
                value: typeVal
            }).appendTo($row.find('td').eq(1));

            var $hiddenItemBarcodeIDInput = $row.find('input[name*="ItemBarcodeID"]').clone();

            var $actionsCell = $row.find('td').eq(2);
            $actionsCell.html('');
            if ($hiddenItemBarcodeIDInput.length) {
                $actionsCell.append($hiddenItemBarcodeIDInput);
            }
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-info btn-sm editItemBarCodeBtn').text('Edit'));
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm deleteBtn').text('Delete'));
        });

        $(document).on('click', '.deleteBtn', function () {
            $(this).closest('tr').remove();
        });

        $(document).on('click', '.editItemBarCodeBtn', function () {
            // Get the current row
            var $row = $(this).closest('tr');

            // Iterate over each cell in the current row
            $row.find('td').each(function () {
                var $td = $(this);
                var text = $td.text().trim(); // Get the text content of the cell
                var inputName = $td.find('input[type="hidden"]').attr('name'); // Get the name of the hidden input

                if (inputName.endsWith('.Barcode') || inputName.endsWith('.Type')) { // Check if there's a hidden input
                    // Replace the cell content with an editable input field
                    $td.html('<input type="text" class="form-control" name="' + inputName.replace('[index]', '[' + $row.index() + ']') + '" value="' + text + '">');
                }
            });

            // Replace the edit button with a save button
            $(this).replaceWith('<button type="button" class="btn btn-success btn-sm saveItemBarCodeBtn">√</button>');
        });

       

    });
</script>