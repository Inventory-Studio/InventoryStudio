@model ItemViewModel

@{
    ViewData["Title"] = "Create Item";
}

<div class="container-fluid py-4">
    <form id="createItemForm">
        <div class="card custom-card ">
            <div class="card-header hstack justify-content-between align-items-center">
                <div class="card-title">
                    Create Item
                </div>
                <button type="submit" class="btn btn-sm btn-primary btn-wave hstack align-items-center mb-0" aria-label="Create item button">
                    <i class="bi-save me-2 align-middle d-inline-block fs-16"></i>Save
                </button>
            </div>
        </div>
        <div class="card custom-card">
            <div class="card-header">
                <div class="d-flex flex-column flex-md-row justify-content-between w-100 gap-2">
                    <ul class="nav nav-tabs card-header-tabs nav-style-1" id="itemFormTab" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" id="item-details-tab" data-bs-toggle="tab" href="#step1" role="tab" aria-controls="step1" aria-selected="true">Item Details</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="barcode-tab" data-bs-toggle="tab" href="#barcode-content" role="tab" aria-controls="barcode-content" aria-selected="false">Item Barcode</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="component-tab" data-bs-toggle="tab" href="#component-content" role="tab" aria-controls="component-content" aria-selected="false" style="display: none;">Item Component</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="kit-item-tab" data-bs-toggle="tab" href="#kit-item-content" role="tab" aria-controls="kit-item-content" aria-selected="false" style="display: none;">Kit Item</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="attribute-tab" data-bs-toggle="tab" href="#attribute-content" role="tab" aria-controls="attribute-content" aria-selected="false" style="display: none;">Attributes</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="matrix-tab" data-bs-toggle="tab" href="#matrix-content" role="tab" aria-controls="matrix-content" aria-selected="false" style="display: none;">Matrix</a>
                        </li>
                    </ul>
                    <div class="hstack mt-4 mt-md-0 btn-list gap-2">
                        @* <a asp-controller="Item" asp-action="Edit" asp-route-id="@Model.Item.ItemID" type="button" class="btn btn-sm btn-primary btn-wave hstack align-items-center mb-0" aria-label="Create item button"> *@
                        @*     <i class="bi-save me-2 align-middle d-inline-block fs-16"></i>Save *@
                        @* </a> *@
                        @* <a asp-controller="Item" asp-action="Index" type="button" class="btn btn-sm btn-light btn-wave hstack align-items-center mb-0" aria-label="back to list button"> *@
                        @*     <i class="bi-arrow-90deg-left me-2 align-middle d-inline-block fs-16"></i>Back to List *@
                        @* </a> *@
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="tab-content m-0" id="itemFormTabContent">
                    <!-- Step 1 -->
                    <div class="tab-pane p-0 m-0 border-0 bg-border-none fade show active" id="step1" role="tabpanel" aria-labelledby="item-details-tab">
                        @await Html.PartialAsync("~/Views/Inventory/Item/_ItemDetails.cshtml", Model)
                    </div>
                    <!-- Step 2 -->
                    @await Html.PartialAsync("~/Views/Inventory/Item/_BarCodes.cshtml", Model)
                    <!-- Step 3 -->
                    @await Html.PartialAsync("~/Views/Inventory/Item/_Component.cshtml", Model)

                    @await Html.PartialAsync("~/Views/Inventory/Item/_Kit.cshtml", Model)

                    @await Html.PartialAsync("~/Views/Inventory/Item/_Matrix.cshtml", Model)

                </div>
            </div>
        </div>
    </form>
</div>

<script src="@Url.Content("~/js/utils/utils.js")"></script>

<script>
   function onSubmit() {
        event.preventDefault();
        $(":submit").attr("disabled", true);
        let formData = $("#createItemForm");
        const data = getFormData(formData)
        const barcodeGrid = $("#GridBarcodes");
        const attributesGrid = $("#GridAttributes");
        if (barcodeGrid != null && barcodeGrid?.length) {
              data["Item.ItemBarcodes"] = barcodeGrid[0]?.ej2_instances[0]?.dataSource;
        }
         if (attributesGrid != null && attributesGrid?.length) {
               data["ItemAttributes"] = attributesGrid[0]?.ej2_instances[0]?.dataSource;
         }
        $.ajax({
            url: "/Item/Create",
            headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
            type: "POST",
            data: data, 
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            success: function (result) {
                if (result.status === "success") {
                    location.href = result.redirect;
                } else {
                    alert(result.message);
                    $(":submit").attr("disabled", false);
                }
            },
            error: function (e) {
                $(":submit").attr("disabled", false);
            } 
        });
    }
    
    function toggleMatrix() {
        var isChecked = $('#createMatrixCheckbox').is(':checked');
        if (isChecked) {
            $('#component-tab').hide();
            $('#barcode-tab').hide();
            $('#kit-item-tab').hide();
            $('#attribute-tab').show();
            $('#matrix-tab').show();
            $("#ItemType option[value='Kit']").prop('disabled', true);
        } else {
            changeItemType();
        }
    }

    function changeItemType() {
        var selectedItemType = $('#Item_ItemType').val();
        var isChecked = $('#createMatrixCheckbox').is(':checked');
        if (!isChecked) {
            switch (selectedItemType) {
                case 'Inventory':
                case 'LotNumbered':
                case 'Serialized':
                    $('#component-tab').hide();
                    $('#barcode-tab').show();
                    $('#kit-item-tab').hide();
                    $('#attribute-tab').hide();
                    $('#matrix-tab').hide();
                    $('#kit-options').hide();
                    $('#createMatrixCheckbox').prop('disabled', false);
                    break;
                case 'Assembly':
                    $('#component-tab').show();
                    $('#barcode-tab').show();
                    $('#kit-item-tab').hide();
                    $('#attribute-tab').hide();
                    $('#matrix-tab').hide();
                    $('#kit-options').hide();
                    $('#createMatrixCheckbox').prop('disabled', false);
                    break;
                case 'Kit':
                    $('#component-tab').hide();
                    $('#barcode-tab').show();
                    $('#kit-item-tab').show();
                    $('#attribute-tab').hide();
                    $('#matrix-tab').hide();
                    $('#kit-options').show();
                    $('#createMatrixCheckbox').prop('disabled', true);
                    break;
                default:
                    $('#component-tab').hide();
                    $('#barcode-tab').show();
                    $('#kit-item-tab').hide();
                    $('#attribute-tab').hide();
                    $('#matrix-tab').hide();
                    $('#kit-options').hide();
                    $('#createMatrixCheckbox').prop('disabled', false);
                    break;
            }
        }

    };

     function addItemBarcode() {
            var itemNumber = $('#Item_ItemNumber').val();
            var barcodeExists = false;
            var $tableBody = $('#barcodeTable').find('tbody');
          

            // Iterate through the rows of the table to check if an entry with the same item number already exists
            $tableBody.find('tr').each(function () {
                var $row = $(this);
                var currentItemType = $row.find('input[name^="Item.ItemBarcodes["][name$="].Type"]').val();

                if (currentItemType == 'Item Number') {
                    barcodeExists = true;

                    var barcodeInput = $row.find('input[name^="Item.ItemBarcodes["][name$="].Barcode"]');
                    barcodeInput.val(itemNumber);

                    var $td = $row.find('td:first');
                    // Remove any text nodes in the td, preparing to insert updated text
                    $td.contents().filter(function () {
                        return this.nodeType == 3; // Node.TEXT_NODE
                    }).remove();
                    // Insert the new barcode text before the hidden input
                    barcodeInput.before(document.createTextNode(itemNumber));
                    return false; // Break the loop since we've found and updated the existing entry
                }
            });

            // If no existing entry was found, add a new row to the table with the new barcode information
            if (!barcodeExists && itemNumber) {
                var index = $tableBody.find('tr').length; // Use the row count as the new index

                // Create a new table row
                var $newRow = $('<tr/>');
                // Add a cell for displaying the barcode
                $newRow.append($('<td/>').addClass('barcode-display').text(itemNumber));
                // Add a cell for displaying the type
                $newRow.append($('<td/>').text('Item Number'));

                // Create a hidden input for the barcode value
                var $hiddenBarcodeInput = $('<input/>', {
                    type: 'hidden',
                    name: 'Item.ItemBarcodes[' + index + '].Barcode',
                    value: itemNumber
                }).appendTo($newRow); // Add the hidden input to the new row

                // Create a hidden input for the barcode type
                var $hiddenTypeInput = $('<input/>', {
                    type: 'hidden',
                    name: 'Item.ItemBarcodes[' + index + '].Type',
                    value: 'Item Number'
                }).appendTo($newRow); // Add the hidden input to the new row

                // Add the new row to the table body
                $tableBody.append($newRow);
            }
        }

        function reindexTableInputs(tableSelector) {
            // Iterate through each row in the specified table
            $(tableSelector + ' tbody tr').each(function (index) {
                // Update the name attribute for each input element within the row to reflect the new index
                $(this).find('input').each(function () {
                    var name = $(this).attr('name');
                    if (name) {
                        // Use a regular expression to find and replace the index within the name attribute
                        var newName = name.replace(/\[\d+\]/, '[' + index + ']');
                        $(this).attr('name', newName);
                    }
                });
            });
        }

    $(document).ready(function () {

        changeItemType();

        toggleMatrix();
       

        // Before form submission, call reindexTableInputs for each table
        $('form').submit(function (e) {
            onSubmit();
            // reindexTableInputs('#barcodeTable');
            reindexTableInputs('#itemComponentsTable');
            reindexTableInputs('#itemKitTable');
            reindexTableInputs('#attributesTable');
            reindexTableInputs('#matrixTable');
            // Allow the form to be submitted normally
        });


    });

</script>