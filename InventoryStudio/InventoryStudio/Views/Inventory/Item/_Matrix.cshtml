@model ItemViewModel

@{
    var toolbarItems = Model.Item?.ItemID != null ? new List<string>() { "Add", "Edit", "Update", "Delete", "PdfExport", "ExcelExport" } : new List<string>() { "Add", "Edit", "Update", "Delete" };
}

<div class="tab-pane border-0 bg-border-none p-0 m-0 fade" id="attribute-content" role="tabpanel" aria-labelledby="attribute-tab">
    <div class="bg-gray-200 py-2 px-3 rounded mb-4">
        <h6 class="mb-0">Attributes</h6>
    </div>
    <ejs-grid id="GridAttributes" class="h-100" dataSource="@Model.ItemAttributes" toolbarClick="attributesToolbarClick" allowPaging="true" allowReordering="true" allowSorting="true" allowSelection="true" allowFiltering="true" enableStickyHeader="true" width="100%" height="100%"
              allowExcelExport="true" allowPdfExport="true" toolbar="@toolbarItems">

        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true"  mode="Dialog"></e-grid-editSettings>
        <e-grid-filterSettings type="Excel" mode="OnEnter"></e-grid-filterSettings>
        @* <e-grid-pagesettings pageCount="5"></e-grid-pagesettings> *@
        <e-grid-columns>
            @if (Model.Item != null && Model.Item.ItemID != null)
            {
                <e-grid-column visible="false" field="ItemBarcodeID" headerText="ID" allowEditing="false" type="int" isPrimaryKey="true"
                               validationRules="@(new { number = true })" width="80">

                </e-grid-column>
            }
            <e-grid-column field="AttributeName" headerText="Attribute" validationRules="@(new { required = true })" width="120"></e-grid-column>
            <e-grid-column field="ItemAttributeValues" headerText="Values" template="#attributes" edit="@(new { create = "create", read = "read", destroy = "destroy", write = "write" })" width="120"></e-grid-column>
            @if (Model.Item != null && Model.Item.ItemID != null)
            {
                <e-grid-column field="UpdatedOn" headerText="Updated On" type="datetime" format="M/d/yyyy h:mm a" allowEditing="false" width="120"></e-grid-column>
                <e-grid-column field="CreatedOn" headerText="Created On" type="datetime" format="M/d/yyyy h:mm a" allowEditing="false" width="120"></e-grid-column>
                <e-grid-column headerText="Actions" template="#actions" allowEditing="false" width="100" maxWidth="100"></e-grid-column>
            }
        </e-grid-columns>
    </ejs-grid>
    <div class="row">
        <div class="col-12">
            <h2>Attributes</h2>
            <button type="button" id="addAttributes" class="btn btn-primary mb-2">Add</button>
            <table class="table" id="attributesTable">
                <thead>
                <tr>
                    <th>Attribute Name</th>
                    <th>Attribute Value</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @if (Model != null && Model.ItemAttributes != null)
                {
                    int index = 0;
                    foreach (var ItemAttribute in Model.ItemAttributes)
                    {
                        int valueIndex = 0;
                        <tr>
                            <td>
                                <span class="attribute-name-display">@ItemAttribute.AttributeName</span>
                                <input type="text" name="ItemAttributes[@index].AttributeName" value="@ItemAttribute.AttributeName" class="attribute-name-input" style="display:none;">
                                <input type="hidden" name="ItemAttributes[@index].ItemAttributeID" value="@ItemAttribute.ItemAttributeID">
                            </td>
                            <td>
                                @{
                                    var allAttributeValues = string.Join(",", ItemAttribute.ItemAttributeValues.Select(v => v.AttributeValueName));
                                }
                                <span class="attribute-value-display">@allAttributeValues</span>
                                @foreach (var itemAttributeValue in ItemAttribute.ItemAttributeValues)
                                {
                                    <input type="hidden" name="ItemAttributes[@index].ItemAttributeValues[@valueIndex].ItemAttributeValueID" value="@itemAttributeValue.ItemAttributeValueID">
                                    <input type="hidden" name="ItemAttributes[@index].ItemAttributeValues[@valueIndex].AttributeValueName" value="@itemAttributeValue.AttributeValueName">
                                    valueIndex++;
                                }

                                <input type="hidden" class="form-control attribute-value-input" value="@allAttributeValues">
                            </td>
                            <td>
                                <input type="hidden" name="ItemAttributes[@index].ItemAttributeID" value="@ItemAttribute.ItemAttributeID">
                                <button type="button" class="btn btn-info btn-sm editItemAttributeBtn">Edit</button>
                                <button type="button" class="btn btn-danger btn-sm deleteAttributeBtn">Delete</button>
                            </td>

                        </tr>
                        index++;
                    }
                }
                </tbody>
            </table>
            <button class="btn btn-secondary">Back</button>
        </div>

    </div>
</div>

<div class="tab-pane border-0 bg-border-none p-0 m-0 fade" id="matrix-content" role="tabpanel" aria-labelledby="matrix-tab">
    <div class="row">
        <div class="col-12">
            <h2>Matrix Attribute(s)</h2>
            @*<button type="button" id="addAttributes" class="btn btn-primary mb-2">Batch Update</button>*@
            <table class="table" id="matrixTable">
                <thead>
                <tr>
                    <th>Item Number</th>
                    <th>Item Name</th>
                    <th>Attributes</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>

                </tbody>
            </table>
            <button class="btn btn-secondary">Back</button>
        </div>
    </div>
</div>

<!-- Bootstrap Modal for existing items -->
<div class="modal fade" id="existingItemModal" tabindex="-1" role="dialog" aria-labelledby="existingItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="existingItemModalLabel">Use Existing Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- The select dropdown where items will be populated -->
                <select id="matrixItemSelect" class="form-control">
                    <!-- Dynamically populated items -->
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" id="saveItemBtn" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="@Url.Content("~/js/utils/utils.js")"></script>
<!-- Javascript logic for datagrid -->
<script lang="js">
const attributesToolbarClick = customBarcodeExportToolbarClick("GridAttributes", "IS_Attributes");
</script>
<script id="attributes" type="text/x-template">
    <div class="hstack gap-2">
 ${for(Value of ItemAttributeValues)}
 <span class="badge bg-primary">${Value.AttributeValueName}</span>
${/for} 
    </div>
</script>
<script>

    var multiSelectObj;
    var element
    function create(args) {
        element = document.createElement('input');
        return element;
    }
    function read(e) {
        console.log(multiSelectObj.value)
        return multiSelectObj.value?.filter(x => x && x != "")?.map(x => { return { AttributeValueName: x }});
    }
    function destroy() {
        multiSelectObj.destroy();
    }
    function write(args) {
        console.log(args)
        let multiSelectVal = args.rowData[args.column.field]
                    ? args.rowData[args.column.field]?.map(x => x.AttributeValueName) 
                    : [];
        
        multiSelectObj = new ej.dropdowns.MultiSelect({
            dataSource: multiSelectVal,
            value: multiSelectVal,
            fields: { text: 'AttributeValueName', value: 'AttributeValueName' },
            floatLabelType: 'Always',
            placeholder:"Value",
            mode: "Box",
            allowCustomValue: true
        });
        multiSelectObj.appendTo(element);
    }
    </script>
@{
    // Build a JSON string for the attributes object, ensuring Model.ItemAttributes is not null
    var attributesJson = "[]";

    if (Model != null && Model.ItemAttributes != null)
    {
        var attributesDictionary = Model.ItemAttributes
            .Where(attr => attr != null) // Ensure each attribute is not null
            .ToDictionary(
                attr => attr.AttributeName,
                attr => attr.ItemAttributeValues != null
                    ? attr.ItemAttributeValues
                        .Where(val => val != null) // Ensure each attribute value is not null
                        .Select(v => v.AttributeValueName)
                        .ToList()
                    : new List<string>()
            );

        attributesJson = Newtonsoft.Json.JsonConvert.SerializeObject(attributesDictionary);
    } // Provide an empty array as a fallback

    // Build a JSON string for the ItemMatrices, ensuring Model.ItemMatrices is not null
    var itemMatricesJson = "[]";
    if (Model != null && Model.ItemMatrices != null)
    {
        var itemMatricesDictionary = Model.ItemMatrices.Select(
            matrix => new
            {
                matrix.ItemID,
                AttributeValueCombination = matrix.ItemMatrixValues != null ? string.Join("-", matrix.ItemMatrixValues.Select(v => v.ItemAttributeValue?.AttributeValueName)) : null, // Concatenate AttributeValueName with "-", ensure ItemMatrixValues is not null
                ItemNumber = matrix.Item?.ItemNumber, // Use null-conditional operator to access Item properties
                ItemName = matrix.Item?.ItemName,
                matrix.ItemMatrixID
            }
        );
        itemMatricesJson = Newtonsoft.Json.JsonConvert.SerializeObject(itemMatricesDictionary);
        // Provide an empty array as a fallback
    }
}


<script>

    $(document).ready(function () {
            // Disable form submission on Enter key for inputs with tagsinput
            $(document).on('keypress', '.bootstrap-tagsinput input', function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                }
            });

            $('#addAttributes').click(function () {
                var newRow = $('<tr>');

                // Add an input for attribute name
            newRow.append($('<td>').append($('<input>').attr('type', 'text').addClass('form-control attribute-name')));

                // Add tagsinput for attribute values
            var tagsInput = $('<input>').attr('type', 'text').addClass('form-control attribute-value').data('role', 'tagsinput');
                newRow.append($('<td>').append(tagsInput));

                // Add buttons for saving and deleting attributes
                var actions = $('<td>');
                actions.append($('<button>').addClass('btn btn-success btn-sm confirmAttributesBtn').html('&#10003;').on('click', function (e) {
                    // Save attribute logic here
                    e.preventDefault();
                }));
                actions.append($('<button>').addClass('btn btn-danger btn-sm deleteBtn').html('&times;').on('click', function (e) {
                    // Delete attribute logic here
                    e.preventDefault();
                }));
                newRow.append(actions);

                // Append the new row to the table's tbody
                $('#attributesTable tbody').append(newRow);

                // Initialize tagsinput plugin
                tagsInput.tagsinput();
            });


        var attributes = @Html.Raw(attributesJson);
        var itemMatrices = @Html.Raw(itemMatricesJson);

        $(document).on('click', '.editItemAttributeBtn', function () {
            var $row = $(this).closest('tr');

            var $attributeValueInput = $row.find('.attribute-value-input');
            

            var originalAttributeValues = $attributeValueInput.val(); //save old value
            $row.data('original-values', originalAttributeValues);

            var attributeName = $row.find('.attribute-name-display').text().trim(); 
            var attributeValues = [];
            var attributeValuesWithId = [];

            $row.find('input[type="hidden"][name*="ItemAttributeValues"]').each(function () {               
                if ($(this).attr('name').includes('.ItemAttributeValueID')) {
                    // 这是ID字段
                    var id = $(this).val();
                    // 立即下一个隐藏的输入应该是相应的Value字段
                    var value = $(this).next('input[type="hidden"][name*=".AttributeValueName"]').val();

                    attributeValuesWithId.push({ value: value, id: id });
                }
            });

            // 存储原始属性值和ID
            $row.data('original-values-with-id', attributeValuesWithId);
            console.log(attributeValuesWithId);
            // 假设每个属性值都包含在它自己的 span.attribute-value-display 元素中
            originalAttributeValues.split(',').forEach(function (value) {
                attributeValues.push(value.trim()); // 收集并清理属性值
            });

            // 转换属性名称为可编辑输入
            $row.find('.attribute-name-input').val(attributeName).show();
            $row.find('.attribute-name-display').hide();

            // 转换属性值为 tagsinput，这里假设 .attribute-value-input 已经初始化为 tagsinput
            $attributeValueInput.tagsinput('removeAll'); // 清除现有的标签
            attributeValues.forEach(value => $attributeValueInput.tagsinput('add', value)); // 添加收集到的属性值作为标签
            $attributeValueInput.show(); // 显示 tagsinput 控件
            $row.find('.attribute-value-display').hide();

            // 更新操作按钮
            var $actionsCell = $row.find('td:last');
            $actionsCell.empty();
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-success btn-sm saveAttributeBtn').html('&#10003;')); // Save button
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm cancelBtn').html('&times;')); // Cancel button
        });

        $(document).on('click', '.saveAttributeBtn', function () {
            var $row = $(this).closest('tr');
            var updatedAttributeValues = $row.find('.attribute-value-input').tagsinput('items'); // 获取更新后的标签值
            var originalValuesWithId = $row.data('original-values-with-id') || [];
            // 获取属性名称，以确保隐藏的输入字段与之对应
            var attributeName = $row.find('.attribute-name-input').val().trim();

            // 只移除与ItemAttributeValues相关的隐藏输入，保留ItemAttributeID和AttributeName输入
            $row.find('input[name*="ItemAttributeValues"]').remove();

       

            // 为更新后的属性值添加隐藏输入字段，尽量保留ID
            updatedAttributeValues.forEach(function (value, index) {
                var originalValueWithId = originalValuesWithId.find(item => item.value === value);
                var valueId = originalValueWithId ? originalValueWithId.id : '';

                $row.append($('<input>').attr({
                    type: 'hidden',
                    name: `ItemAttributes[${$row.index()}].ItemAttributeValues[${index}].AttributeValueName`,
                    value: value
                }));

                if (valueId) {
                    $row.append($('<input>').attr({
                        type: 'hidden',
                        name: `ItemAttributes[${$row.index()}].ItemAttributeValues[${index}].ItemAttributeValueID`,
                        value: valueId
                    }));
                }
            });

            // 更新属性名称和值的显示
            $row.find('.attribute-name-display').text(attributeName).show();
            $row.find('.attribute-name-input').hide();
            $row.find('.attribute-value-display').text(updatedAttributeValues.join(', ')).show();
            $row.find('.attribute-value-input').tagsinput('destroy')


            var $actionsCell = $row.find('td:last');
            $actionsCell.empty();
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-info btn-sm editItemAttributeBtn').text('Edit'));
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm deleteAttributeBtn').text('Delete'));

            // 在这里更新属性和值
            updateAttributesFromDOM();

            // 重新计算矩阵组合并更新UI
            generateMatrixCombinations(attributes, itemMatrices);
        });

        $(document).on('click', '.confirmAttributesBtn', function () {
            // Get the current row
            var $tableBody = $('#attributesTable').find('tbody');
            var index = $tableBody.find('tr').length - 1;
            var $row = $(this).closest('tr');
            var attributeName = $row.find('.attribute-name').val();
            var attributeValues = $row.find('.attribute-value').tagsinput('items'); 

            $row.find('td').eq(0).text(attributeName);
            $row.find('td').eq(1).empty().text(attributeValues.join(', '));

            var $hiddenBarcodeInput = $('<input/>', {
                type: 'hidden',
                name: 'ItemAttributes[' + index + '].AttributeName',
                value: attributeName
            }).addClass('attribute-name-input').appendTo($row.find('td').eq(0));

            attributeValues.forEach(function (value, i) {            
                $row.append($('<input>').attr({
                    type: 'hidden',
                    name: 'ItemAttributes[' + index + '].ItemAttributeValues[' + i + '].AttributeValueName',
                    value: value
                }));
            });

            // Remove the action buttons from the current row
            var $actionsCell = $row.find('td').eq(2);
            $actionsCell.html('');
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm deleteAttributeBtn').text('Delete'));

            // Store the attribute and its values
            // 在这里更新属性和值
            updateAttributesFromDOM();

            // 重新计算矩阵组合并更新UI
            generateMatrixCombinations(attributes, itemMatrices);
        });

        $(document).on('click', '.deleteAttributeBtn', function () {
            $(this).closest('tr').remove();
            updateAttributesFromDOM();

            // 重新计算矩阵组合并更新UI
            generateMatrixCombinations(attributes, itemMatrices);

        });

        function updateAttributesFromDOM() {
            attributes = {}; // 重置 attributes 对象

            $('#attributesTable tbody tr').each(function () {
                var $row = $(this);
                var attributeName = $row.find('.attribute-name-input').val() || $row.find('.attribute-name-display').text();
                var attributeValues = [];

                // 使用选择器匹配所有相关的隐藏输入字段，并提取它们的值
                $row.find('input[name*="ItemAttributeValues"]').each(function () {
                    var name = $(this).attr('name');
                    var value = $(this).val();

                    // 确保只选择 AttributeValueName 字段
                    if (name.includes('AttributeValueName')) {
                        attributeValues.push(value);
                    }
                });

                attributes[attributeName] = attributeValues;
            });
        }

        function generateMatrixCombinations(attributes, itemMatrices) {
            var combinations = cartesianProductOfAttributes(attributes);
            var $matrixTableBody = $('#matrixTable').find('tbody');
            $matrixTableBody.empty();

            // 确保 itemMatrices 是一个数组，如果是 null 或 undefined，则默认为空数组
            itemMatrices = itemMatrices || [];

            combinations.forEach(function (combination, index) {
                var combinationString = combination.join('-');
                var matchingMatrix = itemMatrices.find(matrix => matrix.AttributeValueCombination === combinationString);
                var $newMatrixRow = $('<tr>').attr('data-combination-id', combinationString);
                $newMatrixRow.append($('<td>').text(matchingMatrix ? matchingMatrix.ItemNumber : 'Matrix_' + index));
                $newMatrixRow.append($('<td>').text(matchingMatrix ? matchingMatrix.ItemName : 'Matrix Name'));
                $newMatrixRow.append($('<td>').text(combinationString));

                if (matchingMatrix) {
                    var $actionsTd = $('<td>');
                    var $unbindButton = $('<button type="button">')
                        .addClass('btn btn-primary undo-btn')
                        .text('Undo')
                        .data('item-id', matchingMatrix.ItemID)                        
                        .data('attribute-value', combinationString);

                    $actionsTd.append($unbindButton);
                    $newMatrixRow.data('itemMatrixID', matchingMatrix.ItemMatrixID)

                    var $hiddenMatrixItemIDInput = $('<input/>', {
                        type: 'hidden',
                        name: 'ItemMatrices[' + index + '].ItemMatrixID',
                        value: matchingMatrix.ItemMatrixID
                    });
                    var $hiddenItemIDInput = $('<input/>', {
                        type: 'hidden',
                        name: 'ItemMatrices[' + index + '].ItemID',
                        value: matchingMatrix.ItemID
                    });
                    $actionsTd.append($hiddenMatrixItemIDInput);
                    $actionsTd.append($hiddenItemIDInput);
                    $newMatrixRow.append($actionsTd);
                } else {
                    // 对于未匹配的矩阵，提供“使用现有项”按钮
                    var $useExistingButton = $('<button type="button">')
                        .addClass('btn btn-primary use-existing-item-btn')
                        .text('Use Existing Item')
                        .data('combination', combinationString);

                    $newMatrixRow.append($('<td>').append($useExistingButton));
                }

                $matrixTableBody.append($newMatrixRow);
            });
        }

        // Compute the Cartesian product
        function cartesianProductOfAttributes(attributes) {
            var keys = Object.keys(attributes);
            var results = keys.reduce(function (acc, key) {
                var newAcc = [];
                acc.forEach(function (item) {
                    attributes[key].forEach(function (value) {
                        newAcc.push(item.concat([value]));
                    });
                });
                return newAcc;
            }, [[]]); // Initial value as an array containing an empty array

            return results;
        }

        var ItemMatrixProductOptions = null;

        // Fetch product data when the page loads
        fetchMatrixProductOptions();

        // Function to fetch product data from the server
        function fetchMatrixProductOptions() {
            $.ajax({
                url: '/Item/GetKitChildItems',
                method: 'GET',
                success: function (response) {

                    // Assuming the backend returns data in the format { dataSource: [{ ItemName, ItemId }, ...] }
                    ItemMatrixProductOptions = response.dataSource.map(function (item) {
                        // Create an option element with the text being the ItemName and the value being the ItemId

                        return $('<option>').text(item.itemName).val(item.itemID);
                    });
                    // Update the select elements with these options
                    //updateSelectElements();
                },
                error: function (error) {
                    console.error('Error fetching product data:', error);
                }
            });
        }

        // When 'Use Existing Item' is clicked, show the modal
        $(document).on('click', '.use-existing-item-btn', function () {
            // Assuming the modal has an ID of 'existingItemModal'
            $('#matrixItemSelect').append(ItemMatrixProductOptions);
            var combinationId = $(this).closest('tr').data('combination-id');
            $('#existingItemModal').data('combination-id', combinationId);
            $('#existingItemModal').modal('show');
        });

        // When an item is selected in the modal and 'Save' is clicked
        $(document).on('click', '#saveItemBtn', function () {
            // Get the selected item details
            var selectedItem = $('#matrixItemSelect').find('option:selected').text();            
            var selectedItemParts = selectedItem.split('-');
            var itemId = $('#matrixItemSelect').val();
            var itemNumber = selectedItemParts[0];
            var itemName = selectedItemParts[1];

            // Use the combination ID to find the row to update
            var combinationId = $('#existingItemModal').data('combination-id');
            var $rowToUpdate = $('#matrixTable').find(`tr[data-combination-id="${combinationId}"]`);
            // Find the index of the row within the tbody
            var index = $rowToUpdate.index();

            // Update the table row with the selected item details
            $rowToUpdate.find('td').eq(0).text(itemNumber);
            $rowToUpdate.find('td').eq(1).text(itemName);

            if ($rowToUpdate.data('itemMatrixID')) {
                // 如果有，更新 ItemMatrixID 的隐藏 input
                var $hiddenMatrixIDInput = $('<input/>', {
                    type: 'hidden',
                    name: `ItemMatrices[${index}].ItemMatrixID`,
                    value: $rowToUpdate.data('itemMatrixID')
                });
                $rowToUpdate.append($hiddenMatrixIDInput);
            }


             var $hiddenBarcodeInput = $('<input/>', {
                type: 'hidden',
                name: 'ItemMatrices[' + index + '].ItemID',
                value: itemId
            }).appendTo($rowToUpdate);

            var $hiddenTypeInput = $('<input/>', {
                type: 'hidden',
                name: 'ItemMatrices[' + index + '].AttributeValue',
                value: combinationId
            }).appendTo($rowToUpdate);


            // Change the button to 'Undo' and switch classes
            $rowToUpdate.find('.use-existing-item-btn').removeClass('use-existing-item-btn').addClass('undo-btn').text('Undo');

            // Close the modal
            $('#existingItemModal').modal('hide');
        });

        // When 'Undo' is clicked
        $(document).on('click', '.undo-btn', function (e) {

            // Prevent the default action and stop the event from bubbling up to prevent triggering the modal
            e.preventDefault();
            e.stopPropagation();

            var $row = $(this).closest('tr');
            var combinationId = $row.data('combination-id');

            // Remove the hidden input for ItemMatrixID
            $row.find('input[name*="ItemMatrices["][name$="].ItemMatrixID"]').remove();
            $row.find('input[name*="ItemMatrices["][name$="].ItemID"]').remove();

            // Revert the changes made to the row
            $row.find('td').eq(0).text('Matrix_' + combinationId);
            $row.find('td').eq(1).text('Matrix');
            $row.find('td').eq(2).text('- ' + combinationId);

            // Change the button back to 'Use Existing Item'
            $(this).removeClass('undo-btn').addClass('use-existing-item-btn').text('Use Existing Item');
        });

        generateMatrixCombinations(attributes, itemMatrices);
    

        

    });
</script>