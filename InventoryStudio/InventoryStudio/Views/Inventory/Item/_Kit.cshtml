@model ItemViewModel

<div class="tab-pane fade" id="kit-item-content" role="tabpanel" aria-labelledby="kit-item-tab">
    <div class="row">
        <div class="col-12">
            <h2>Kit Items</h2>
            <button type="button" id="addkitItem" class="btn btn-primary mb-2">Add</button>
            <table class="table" id="itemKitTable">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Quantity</th>
                        <th>Unit of Measure</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Item.ItemKits != null)
                    {
                        int index = 0;
                        foreach (var ItemKit in Model.Item.ItemKits)
                        {
                            if (ItemKit.ChildItem != null)
                            {
                                <tr>
                                    <td>
                                        @ItemKit.ChildItem.ItemName
                                        <input type="hidden" name="Item.ItemKits[@index].ChildItemID" value="@ItemKit.ChildItemID">
                                    </td>
                                    <td>
                                        @ItemKit.Quantity
                                        <input type="hidden" name="Item.ItemKits[@index].Quantity" value="@ItemKit.Quantity">
                                    </td>
                                    <td><input type="text" class="form-control"></td>
                                    <td>
                                        <input type="hidden" name="Item.ItemKits[@index].ItemkitID" value="@ItemKit.ItemKitID">
                                        <button type="button" class="btn btn-info btn-sm editItemKitBtn">Edit</button>
                                        <button type="button" class="btn btn-danger btn-sm deleteBtn">Delete</button>

                                    </td>
                                </tr>
                                index++;
                            }
                        }
                    }
                    @if (Model != null)
                    {
                        foreach (var ItemKit in Model.Item.ItemKits ?? Enumerable.Empty<ItemKit>())
                        {

                        }
                    }
                </tbody>
            </table>
            <button class="btn btn-secondary">Back</button>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        //ItemKit
        // Global variable to store product options
        var ItemKitProductOptions = null;

        // Fetch product data when the page loads
        fetchKitProductOptions();

        // Function to fetch product data from the server
        function fetchKitProductOptions() {
            $.ajax({
                url: '/Item/GetKitChildItems',
                method: 'GET',
                success: function (response) {

                    // Assuming the backend returns data in the format { dataSource: [{ ItemName, ItemId }, ...] }
                    ItemKitProductOptions = response.dataSource.map(function (item) {
                        // Create an option element with the text being the ItemName and the value being the ItemId

                        return $('<option>').text(item.itemName).val(item.itemID);
                    });
                    // Update the select elements with these options
                    //updateSelectElements();
                },
                error: function (error) {
                    console.error('Error fetching product data:', error);
                }
            });
        }


        // Add a new row when the 'Add' button is clicked
        $('#addkitItem').click(function () {
            // Create a new table row
            var newRow = $('<tr>');
            var select = $('<select>').addClass('form-control item-select');

            // Append the product options to the select element
            select.append(ItemKitProductOptions);

            newRow.append($('<td>').append(select));
            newRow.append($('<td>').append($('<input>').attr('type', 'number').addClass('form-control').val(1)));
            newRow.append($('<td>').append($('<input>').attr('type', 'text').addClass('form-control')));

            var actions = $('<td>').append($('<button>').addClass('btn btn-success btn-sm saveItemKitBtn').html('&#10003;'));
            actions.append($('<button>').addClass('btn btn-danger btn-sm deleteBtn').html('&times;'));
            newRow.append(actions);

            // Append the new row to the table's tbody
            $('#itemKitTable tbody').append(newRow);
        });

        $(document).on('click', '.editItemKitBtn', function () {
            var $row = $(this).closest('tr');

            // Assuming the first cell contains the item name as text and a hidden input for the item ID
            var itemName = $row.find('td:first').text().trim();
            var itemId = $row.find('input[type="hidden"][name*="ChildItemID"]').val();

            // Transform the first cell into a dropdown for item selection
            var $select = $('<select>').addClass('form-control item-select');
            // Append previously fetched options to the select element. Ensure fetchProductOptions() populates a global variable correctly.
            $select.append(ItemKitProductOptions);
            // Set the selected value based on the item ID
            $select.val(itemId);
            $row.find('td:first').empty().append($select);

            // Transform the second cell for quantity into an editable input field
            var quantity = $row.find('td').eq(1).text().trim();
            $row.find('td').eq(1).empty().append($('<input>').attr('type', 'number').addClass('form-control').val(quantity));

            // Replace the edit and delete buttons with a save and cancel button
            var $actionsCell = $row.find('td:last');
            $actionsCell.empty();
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-success btn-sm saveItemKitBtn').html('&#10003;')); // Save button
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm cancelBtn').html('&times;')); // Cancel button
        });

        // Handle the save operation
        $(document).on('click', '.saveItemKitBtn', function () {
            var $row = $(this).closest('tr');

            // Extract values from the editable inputs/select
            var itemName = $row.find('select.item-select option:selected').text();
            var itemId = $row.find('select.item-select').val();
            var quantity = $row.find('input[type="number"]').val();

            // Update the row with the new values and convert inputs back to text
            $row.find('td:first').text(itemName).append($('<input>').attr('type', 'hidden').attr('name', 'Item.ItemKits[' + $row.index() + '].ChildItemID').val(itemId));
            $row.find('td').eq(1).text(quantity).append($('<input>').attr('type', 'hidden').attr('name', 'Item.ItemKits[' + $row.index() + '].Quantity').val(quantity));

            // Replace save and cancel buttons back to edit and delete
            var $actionsCell = $row.find('td:last');
            $actionsCell.empty();
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-info btn-sm editItemComponentBtn').text('Edit'));
            $actionsCell.append($('<button type="button"/>').addClass('btn btn-danger btn-sm deleteBtn').text('Delete'));
        });

        // Handle the cancel operation
        $(document).on('click', '.cancelBtn', function () {
            // Reload or reset the row to its original state. This may require re-fetching the data or storing the original state before editing.
            location.reload(); // Simple but not efficient way to reset the state. Consider more sophisticated state management for production use.
        });


        $(document).on('click', '.deleteBtn', function () {
            $(this).closest('tr').remove();
        });


    });
</script>

